name: CD / Infrastructure Develop

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.28.0
      - name: Install tfcmt
        run: aqua g -i suzuki-shunsuke/tfcmt
      - name: Generate Firebase service account key JSON file
        working-directory: function
        run: echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_JSON_BASE64_DEV }}" | base64 -d > firebase-serviceAccountKey_dev.json
      - name: Generate Cloud Tasks service account key JSON file
        working-directory: function
        run: echo "${{ secrets.CLOUD_TASKS_SERVICE_ACCOUNT_KEY_JSON_BASE64_DEV }}" | base64 -d > cloud-tasks-serviceAccountKey_dev.json
      - name: Generate Terraform vars file
        working-directory: infra
        run: echo "${{ secrets.TERRAFORM_VARS_BASE64_DEV }}" | base64 -d > terraform.tfvars
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        id: "auth"
        with:
          service_account: ${{ secrets.DEPLOY_FUNCTIONS_SERVICE_ACCOUNT_EMAIL_DEV }}
          workload_identity_provider: ${{ secrets.DEPLOY_FUNCTIONS_WORKLOAD_IDENTITY_PROVIDER_DEV }}
      - uses: hashicorp/setup-terraform@v2
      - name: Terraform format
        id: fmt
        working-directory: infra
        run: terraform fmt -check -recursive
        continue-on-error: true
      - name: Terraform Init
        id: init
        working-directory: infra
        run: terraform init
      - name: Terraform Validate
        id: validate
        working-directory: infra
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        working-directory: infra
        run: tfcmt plan -- terraform plan
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
