inputs:
  github_token:
    required: true
  firebase_options_dart_base64_emulator:
    required: true
  firebase_options_dart_base64_dev:
    required: true

runs:
  using: "composite"
  steps:
    - name: Install reviewdog
      uses: reviewdog/action-setup@v1
      with:
        reviewdog_version: latest

    - name: Install Code Spell Checker
      shell: bash
      run: npm install -g cspell

    - name: Check Code Spell
      shell: bash
      run: cspell '**/*.{dart,swift,kt}' > cspell.log

    - name: Run reviewdog for Code Spell Checker
      if: failure()
      shell: bash
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ inputs.github_token }}
      run: cat cspell.log | reviewdog -efm='%f:%l:%c - %m' -name='Code Spell Checker' -reporter='github-pr-review'

    - uses: actions/setup-java@v1
      with:
        java-version: 12.x

    # Read Flutter version from version file for asdf,
    # remove the "-stable" suffix,
    # and store it in the environment variable
    - name: Get Flutter version
      shell: bash
      run: |
        asdf_flutter_version="$(cat .tool-versions | awk '{print $2}')"
        flutter_version="$(echo $asdf_flutter_version | sed -e 's/-stable//g')"
        echo "FLUTTER_VERSION=$flutter_version" >> $GITHUB_ENV

    - name: Cache Flutter
      uses: actions/cache@v3
      with:
        path: /opt/hostedtoolcache/flutter
        key: ${{ runner.OS }}-flutter-${{ env.FLUTTER_VERSION }}

    - uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}

    - name: Generate Firebase options files
      shell: bash
      env:
        FIREBASE_OPTIONS_DART_BASE64_EMULATOR: ${{ inputs.firebase_options_dart_base64_emulator }}
        FIREBASE_OPTIONS_DART_BASE64_DEV: ${{ inputs.firebase_options_dart_base64_dev }}
      run: |
        echo "${FIREBASE_OPTIONS_DART_BASE64_EMULATOR}" | base64 -d > lib/firebase_options_emulator.dart
        echo "${FIREBASE_OPTIONS_DART_BASE64_DEV}" | base64 -d > lib/firebase_options_dev.dart

    - name: Generate automatic codes
      shell: bash
      run: |
        flutter pub get
        flutter pub run build_runner build

    - name: Flutter analyze
      shell: bash
      run: flutter analyze --fatal-infos > flutter-analyze.log

    - name: Run reviewdog for Flutter Analyzer
      if: failure()
      shell: bash
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ inputs.github_token }}
      run: cat flutter-analyze.log | reviewdog -efm='%#%t%.%# • %m • %f:%l:%c %r' -name='Flutter Analyzer' -reporter='github-pr-review'
